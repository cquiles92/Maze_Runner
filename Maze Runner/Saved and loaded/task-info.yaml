type: edu
custom_name: stage3
files:
- name: src/maze/Main.java
  visible: true
  text: |
    package maze;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/MazeRunnerTest.java
  visible: false
  text: |
    import maze.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum Elem {
        WALL, EMPTY, PATH, DUMMY;

        static Elem get(char c) {
            if (c == '\u2588') {
                return WALL;
            } else if (c == ' ') {
                return EMPTY;
            } else if (c == '/') {
                return PATH;
            } else {
                return null;
            }
        }
    }

    class Maze {

        // maze[height][width]
        // maze[row][col]
        Elem[][] maze;

        Maze(Maze other) {
            maze = new Elem[other.getHeight()][other.getWidth()];
            for (int h = 0; h < other.getHeight(); h++) {
                for (int w = 0; w < other.getWidth(); w++) {
                    maze[h][w] = other.maze[h][w];
                }
            }
        }

        Maze(List<String> lines) throws Exception {

            int lineCount = 1;
            for (String line : lines) {
                if (line.length() % 2 != 0) {
                    throw new Exception("Line " + lineCount + " of the maze " +
                        "contains odd number of characters. Should be always even.");
                }

                for (char c : line.toCharArray()) {
                    if (Elem.get(c) == null) {
                        String hex = Integer.toHexString((int)c);
                        throw new Exception(
                            "Found strange symbol in the " + lineCount +
                                " line of the maze: \\u" + hex);
                    }
                }

                int lineWidth = line.length() / 2;

                for (int currWidth = 0; currWidth < lineWidth; currWidth++) {
                    int currIndex = currWidth * 2;
                    int nextIndex = currIndex + 1;

                    char currChar = line.charAt(currIndex);
                    char nextChar = line.charAt(nextIndex);

                    if (currChar != nextChar) {
                        throw new Exception("There are symbols in " +
                            "this line that don't appear twice in a row " +
                            "(at indexes " + currIndex + " and " + nextIndex + ").\n" +
                            "Line: \"" + line + "\"");
                    }
                }

                lineCount++;
            }

            int mazeWidth = lines.get(0).length() / 2;
            int mazeHeight = lines.size();

            lineCount = 1;
            for (String line : lines) {
                if (line.length() / 2 != mazeWidth) {
                    throw new Exception("The first line of the maze contains " +
                        lines.get(0).length() + " characters, but the line #" +
                        lineCount + " contains " + line.length() + " characters.");
                }
                lineCount++;
            }

            maze = new Elem[mazeHeight][mazeWidth];

            for (int currHeight = 0; currHeight < mazeHeight; currHeight++) {
                String line = lines.get(currHeight);
                for (int currWidth = 0; currWidth < mazeWidth; currWidth++) {
                    char c = line.charAt(currWidth * 2);
                    maze[currHeight][currWidth] = Elem.get(c);
                }
            }

            if (maze[0][0] != Elem.WALL ||
                maze[0][mazeWidth - 1] != Elem.WALL ||
                maze[mazeHeight - 1][0] != Elem.WALL ||
                maze[mazeHeight - 1][mazeWidth - 1] != Elem.WALL) {
                throw new Exception("All four corners of the maze must be walls.");
            }

            for (int h = 0; h <= mazeHeight - 3; h++) {
                for (int w = 0; w <= mazeWidth - 3; w++) {
                    if (getElem(h, w) == Elem.WALL &&
                        getElem(h, w + 1) == Elem.WALL &&
                        getElem(h, w + 2) == Elem.WALL &&

                        getElem(h + 1, w) == Elem.WALL &&
                        getElem(h + 1, w + 1) == Elem.WALL &&
                        getElem(h + 1, w + 2) == Elem.WALL &&

                        getElem(h + 2, w) == Elem.WALL &&
                        getElem(h + 2, w + 1) == Elem.WALL &&
                        getElem(h + 2, w + 2) == Elem.WALL) {

                        throw new Exception("There are 3x3 block in the maze " +
                            "consisting only of walls. Such blocks are not allowed.");
                    }
                }
            }
        }

        Elem[] getRow(int rowNum) {
            Elem[] newRow = new Elem[getWidth()];
            for (int i = 0; i < getWidth(); i++) {
                newRow[i] = maze[rowNum][i];
            }
            return newRow;
        }

        Elem[] getCol(int colNum) {
            Elem[] newCol = new Elem[getHeight()];
            for (int i = 0; i < getHeight(); i++) {
                newCol[i] = maze[i][colNum];
            }
            return newCol;
        }

        Elem getElem(int height, int width) {
            return maze[height][width];
        }

        void setElem(int height, int width, Elem elem) {
            maze[height][width] = elem;
        }

        int getWidth() {
            return maze[0].length;
        }

        int getHeight() {
            return maze.length;
        }

        Maze copy() {
            return new Maze(this);
        }

        int count(Elem toCount) {
            int sum = 0;
            for (Elem[] row : maze) {
                for (Elem e : row) {
                    if (e == toCount) {
                        sum++;
                    }
                }
            }
            return sum;
        }

        int countAround(int h, int w, Elem elem) {
            int sum = 0;

            if (h + 1 < getHeight() &&
                getElem(h + 1, w) == elem) {
                sum++;
            }

            if (h - 1 >= 0 &&
                getElem(h - 1, w) == elem) {
                sum++;
            }

            if (w + 1 < getWidth() &&
                getElem(h, w + 1) == elem) {
                sum++;
            }

            if (w - 1 >= 0 &&
                getElem(h, w - 1) == elem) {
                sum++;
            }

            return sum;
        }

        int countEntrances() {
            int entranceCount = 0;
            for (Elem[] line : new Elem[][] {
                getCol(0),
                getCol(getWidth() - 1),
                getRow(0),
                getRow(getHeight() - 1)
            }) {

                for (Elem e : line) {
                    if (e != Elem.WALL) {
                        entranceCount++;
                    }
                }
            }
            return entranceCount;
        }

        private void propagate(Elem from, Elem to) {
            boolean didPropagate = true;
            while (didPropagate) {
                didPropagate = false;
                for (int h = 0; h < getHeight(); h++) {
                    for (int w = 0; w < getWidth(); w++) {
                        if (getElem(h, w) == from) {
                            if (countAround(h, w, to) > 0) {
                                didPropagate = true;
                                setElem(h, w, to);
                            }
                        }
                    }
                }
            }
        }

        int checkAccessibility() {
            int entranceHeight = 0;
            int entranceWidth = 0;

            findPoints: {
                for (int currWidth : new int[] {0, getWidth() - 1}) {
                    for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }

                for (int currHeight : new int[] {0, getHeight() - 1}) {
                    for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.PATH);
            copy.propagate(Elem.EMPTY, Elem.PATH);

            return copy.count(Elem.EMPTY);
        }

        int checkPath() throws Exception {
            int entranceHeight = 0;
            int entranceWidth = 0;

            for (int currWidth : new int[] {0, getWidth() - 1}) {
                for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int currHeight : new int[] {0, getHeight() - 1}) {
                for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.PATH) {
                        if (countAround(h, w, Elem.PATH) >= 3) {
                            throw new Exception("The escape path shouldn't branch off, " +
                                "it should go in one direction.");
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.DUMMY);
            copy.propagate(Elem.PATH, Elem.DUMMY);

            return copy.count(Elem.PATH);
        }

        boolean equals(Maze other) {
            if (getWidth() != other.getWidth() || getHeight() != other.getHeight()) {
                return false;
            }
            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.WALL && other.getElem(h, w) != Elem.WALL ||
                        getElem(h, w) != Elem.WALL && other.getElem(h, w) == Elem.WALL) {
                        return false;
                    }
                }
            }
            return true;
        }

        static List<Maze> parse(String text) throws Exception {

            List<Maze> mazes = new ArrayList<>();

            List<String> lines = text
                .lines()
                .collect(Collectors.toList());

            lines.add("");

            List<String> mazeLines = new ArrayList<>();

            boolean isStarted = false;
            for (String line : lines) {
                if (line.contains("\u2588")) {
                    isStarted = true;
                    mazeLines.add(line);
                } else if (isStarted) {
                    isStarted = false;
                    Maze maze = new Maze(mazeLines);
                    mazes.add(maze);
                    mazeLines.clear();
                }
            }

            return mazes;
        }

    }

    class Clue {
        int size;
        Clue(int s) {
            size = s;
        }
    }

    public class MazeRunnerTest extends StageTest<Clue> {

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>()
                    .setInput("0"),

                new TestCase<Clue>()
                    .setInput("1\n17\n0")
                    .setAttach(new Clue(17)),

                new TestCase<Clue>()
                    .setInput("1\n15\n3\ntest_maze.txt\n0")
                    .setAttach(new Clue(15)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n0")
                    .setAttach(new Clue(15))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<Maze> mazes;
            try {
                mazes = Maze.parse(reply);
            } catch (Exception e) {
                return CheckResult.wrong(
                    e.getMessage()
                );
            }

            if (clue == null && mazes.size() == 0) {
                return CheckResult.correct();
            } else if (clue == null) {
                return CheckResult.wrong(
                    "In this test no maze should be shown, but one was shown. " +
                        "Try to use \\u2588 character only to print the maze."
                );
            } else if (mazes.size() == 0) {
                return CheckResult.wrong(
                    "No mazes found in the output. Check if you are using " +
                        "\\u2588 character to print the maze."
                );
            }

            if (mazes.size() > 1) {
                return CheckResult.wrong(
                    "Found " + mazes.size() + " mazes in the output. " +
                        "Should be only one maze."
                );
            }

            Maze maze = mazes.get(0);

            int entrances = maze.countEntrances();
            if (entrances != 2) {
                return new CheckResult(false,
                    "There are " + entrances + " entrances to the maze, " +
                        "should be only two.");
            }

            int emptyLeft = maze.checkAccessibility();
            if (emptyLeft > 0) {
                return new CheckResult(false,
                    "There are " + emptyLeft + " empty " +
                        "cells that are inaccessible from the entrance of the maze " +
                        "(or there is no way from the entrance to the exit)."
                );
            }

            if (maze.getHeight() != clue.size) {
                return new CheckResult(false,
                    "Number of rows in the maze is incorrect. " +
                        "It's " + maze.getHeight() + ", but should be " + clue.size);
            }

            if (maze.getWidth() != clue.size) {
                return new CheckResult(false,
                    "Number of columns in the maze is incorrect. " +
                        "It's " + maze.getWidth() + ", but should be " + clue.size);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/maze/Cell.java
  visible: true
  text: |
    package maze;

    public class Cell {
        int x;
        int y;
        boolean isVisited;

        Cell(int x, int y) {
            this.x = x;
            this.y = y;
            isVisited = false;
        }


        public void visit() {
            isVisited = true;
        }

        @Override
        public String toString() {
            return "Cell{" +
                   "row =" + x +
                   ", column =" + y +
                   '}';
        }
    }
  learner_created: true
- name: src/maze/MazeGenerator.java
  visible: true
  text: |
    package maze;

    import java.util.InputMismatchException;
    import java.util.Scanner;

    public class MazeGenerator {
        private final Scanner scanner;

        MazeGenerator() {
            scanner = new Scanner(System.in);
        }

        public void createMaze() {
            System.out.println("Please, enter the size of a maze");
            String[] input = scanner.nextLine().trim().split(" ");
            try {
                int height = Integer.parseInt(input[0]);
                int width = Integer.parseInt(input[1]);

                Maze maze = new Maze(height, width);
                maze.printMaze();

            } catch (InputMismatchException e) {
                System.out.println("Incorrect input");
            }
        }
    }
  learner_created: true
- name: src/maze/Maze.java
  visible: true
  text: |
    package maze;

    import java.util.*;
    import java.util.concurrent.ThreadLocalRandom;

    public class Maze {
        private final int MAZE_HEIGHT;
        private final int MAZE_WIDTH;
        private final int[][] maze;

        private final int cellStructureHeight;
        private final int cellStructureLength;
        private final Cell[][] cellStructure;

        Maze(int height, int width) {
            MAZE_HEIGHT = height;
            MAZE_WIDTH = width;
            maze = new int[MAZE_HEIGHT][MAZE_WIDTH];

            cellStructureHeight = MAZE_HEIGHT % 2 == 0 ? (MAZE_HEIGHT - 1) / 2 : MAZE_HEIGHT / 2;
            cellStructureLength = MAZE_WIDTH % 2 == 0 ? (MAZE_WIDTH - 1) / 2 : MAZE_WIDTH / 2;

            cellStructure = new Cell[cellStructureHeight][cellStructureLength];

            setMaze();
            setCellStructure();
            generateMaze();
        }


        private void setMaze() {
            for (int i = 0; i < MAZE_HEIGHT; i++) {
                for (int j = 0; j < MAZE_WIDTH; j++) {
                    if (i % 2 == 0 || j % 2 == 0 ||
                        (MAZE_WIDTH % 2 == 0 && j == MAZE_WIDTH - 1)
                        || (MAZE_HEIGHT % 2 == 0 && i == MAZE_HEIGHT - 1)) {
                        maze[i][j] = 1;
                    }
                }
            }
        }

        public void printMaze() {
            for (int[] arr : maze) {
                for (int num : arr) {
                    System.out.print(num == 1 ? "\u2588\u2588" : "  ");
                }
                System.out.println();
            }
        }

        private void setCellStructure() {
            for (int i = 0; i < cellStructure.length; i++) {
                for (int j = 0; j < cellStructure[i].length; j++) {
                    Cell currentCell = new Cell((2 * i + 1), (2 * j + 1));
                    cellStructure[i][j] = currentCell;
                }
            }
        }

        private List<Cell> getNeighbors(Cell cell) {
            List<Cell> neighbors = new ArrayList<>();
            int row = cell.x / 2;
            int column = cell.y / 2;

            Cell neighbor;

            //above cell
            if (row - 1 >= 0) {
                neighbor = cellStructure[row - 1][column];
                addToNeighbors(neighbors, neighbor);
            }

            //below cell
            if (row + 1 < cellStructure.length) {
                neighbor = cellStructure[row + 1][column];
                addToNeighbors(neighbors, neighbor);
            }

            //left cell
            if (column - 1 >= 0) {
                neighbor = cellStructure[row][column - 1];
                addToNeighbors(neighbors, neighbor);
            }

            //right cell
            if (column + 1 < cellStructure[row].length) {
                neighbor = cellStructure[row][column + 1];
                addToNeighbors(neighbors, neighbor);
            }
            return neighbors;
        }

        private void addToNeighbors(List<Cell> neighbors, Cell neighbor) {
            if (!neighbor.isVisited) {
                neighbors.add(neighbor);
            }
        }

        private void generateMaze() {
            Cell currentCell = cellStructure[0][0];
            Set<Cell> visitedCells = new HashSet<>();

            Stack<Cell> cellStack = new Stack<>();

            while (visitedCells.size() < cellStructureLength * cellStructureHeight) {
                //visit current cell and add it to the list
                currentCell.visit();
                visitedCells.add(currentCell);
                List<Cell> neighbors = getNeighbors(currentCell);


                //if there's nowhere left to go, backtrack to the last cell with more than 1 neighbor
                if (neighbors.size() == 0) {
                    currentCell = cellStack.pop();
                }
                //if there's more than 1 direction to go. between 2 or 3 realistically on a 2-d grid without diagonals,
                //and you cannot go backwards.
                else {
                    Cell nextCell;
                    if (neighbors.size() > 1) {
                        //backtrack marker back here sometime in the future once I am stuck
                        cellStack.push(currentCell);
                        //pick a random spot
                        nextCell = neighbors.get(ThreadLocalRandom.current().nextInt(0, neighbors.size()));
                    } else {
                        //pick default last spot available
                        nextCell = neighbors.get(0);
                    }
                    //erase the wall
                    eraseWall(currentCell, nextCell);

                    //move to next cell
                    currentCell = nextCell;

                }
                //create entrance and exit
            }
            generateEntries();
        }

        private void eraseWall(Cell currentCell, Cell nextCell) {
            int xWall = currentCell.x == nextCell.x ? currentCell.x : currentCell.x > nextCell.x ? currentCell.x - 1 : currentCell.x + 1;
            int yWall = currentCell.y == nextCell.y ? currentCell.y : currentCell.y > nextCell.y ? currentCell.y - 1 : currentCell.y + 1;
            maze[xWall][yWall] = 0;
        }

        private void generateEntries() {
            //random between left and right or top and bottom

            if (MAZE_WIDTH % 2 == 0 && MAZE_HEIGHT % 2 == 0) {
                //need to grab the left and top walls
                leftWallEntry();
                topWallEntry();

            } else if (MAZE_WIDTH % 2 == 0) {
                //right wall has more than 1. Use top and bottom
                topWallEntry();
                bottomWallEntry();

            } else if (MAZE_HEIGHT % 2 == 0) {
                //bottom wall has more than 1. Use left and right
                leftWallEntry();
                rightWallEntry();

            } else {
                int sides = ThreadLocalRandom.current().nextInt();

                if (sides % 2 == 0) {
                    //top and bottom
                    //0 and regular array length -1
                    topWallEntry();
                    bottomWallEntry();

                } else {
                    //left and right
                    leftWallEntry();
                    rightWallEntry();
                }
            }
        }

        private void leftWallEntry() {
            int random = ThreadLocalRandom.current().nextInt(0, MAZE_HEIGHT);

            while (maze[random][1] == 1) {
                random = ThreadLocalRandom.current().nextInt(0, MAZE_HEIGHT);
            }
            maze[random][0] = 0;
        }

        private void rightWallEntry() {
            int random = ThreadLocalRandom.current().nextInt(0, MAZE_HEIGHT);

            while (maze[random][MAZE_WIDTH - 2] == 1) {
                random = ThreadLocalRandom.current().nextInt(0, MAZE_HEIGHT);
            }
            maze[random][MAZE_WIDTH - 1] = 0;
        }

        private void topWallEntry() {
            int random = ThreadLocalRandom.current().nextInt(0, MAZE_WIDTH);

            while (maze[1][random] == 1) {
                random = ThreadLocalRandom.current().nextInt(0, MAZE_WIDTH);
            }
            maze[0][random] = 0;
        }

        private void bottomWallEntry() {
            int random = ThreadLocalRandom.current().nextInt(0, MAZE_WIDTH);

            while (maze[maze.length - 2][random] == 1) {
                random = ThreadLocalRandom.current().nextInt(0, MAZE_WIDTH);
            }
            maze[MAZE_HEIGHT - 1][random] = 0;
        }
    }
  learner_created: true
- name: test_maze.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5395#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 06 Jun 2022 23:27:46 UTC
record: 3
